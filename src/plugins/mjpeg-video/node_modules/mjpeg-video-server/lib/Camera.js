const Listener      = require( "Listener" );
const Promise       = require( "bluebird" );
const Respawn       = require( "respawn" );

const net           = require( "net" );

const log           = require( "debug" )( "app:camera:log" );
const error	    = require( "debug" )( "app:camera:error" );

const dLog	    = require( "debug" )( "app:daemon:log" );
const dError	    = require( "debug" )( "app:daemon:error" );

const { exec }      = require( "child_process" );

class Camera
{
    constructor( serial, devicePath, wsPort, raspiCameraID, configuration )
    {
        // Camera properties
        this.serial     = serial;
        this.devicePath = devicePath;
        this.wsPort     = wsPort;
        this.httpPort   = wsPort+1000;
        this.cameraID   = raspiCameraID;
        this.cameraName = "camera" + raspiCameraID.toString();
        this.alive      = true;

        // Config
        this.sslInfo    = configuration.sslInfo;
        this.settings   = configuration.cameraSettings;
        this.sioServerLocal   = configuration.sioServerLocal;
        this.sioServerRemote  = configuration.sioServerRemote;
        this.eventBus   = configuration.eventBus;
        this.runVideo   = configuration.runVideo;

        // Mock mode info
        this.useMock            = configuration.useMock;

        // Create process daemon
        this.daemon = Respawn( this.getDaemonCommand(this.runVideo),
        {
            name:           'mjpg-streamer',
            env:            {LD_LIBRARY_PATH:'/usr/local/lib/mjpg-streamer:/usr/local/lib:/usr/lib'},
            maxRestarts:    1000,
            sleep:          5000
        });

        // Promisify start and stop
        this.daemon.startAsync  = Promise.promisify( this.daemon.start );
        this.daemon.stopAsync   = Promise.promisify( this.daemon.stop );

        // Set up daemon listeners
        this.daemon.on( "crash", () =>
        {
            dError( "Camera crashed too many times. Disabling." );

            // Camera has crashed too many times. Kill it.
            this.kill();
        });

        this.daemon.on( "stderr", (data) =>
        {
            dError( data.toString() );
        });

        this.listeners = 
        {
            registration: new Listener( this.eventBus, "broadcastRegistration", false, () =>
            {
                if( this.alive === true )
                {
                    log( "Sending registration: " + this.cameraName + " port: " + this.wsPort);

                    // Send registration message
                    this.sioServerLocal.emit( "stream.registration", this.serial, 
                    {
                        relativeServiceUrl:     null,
                        port:		        this.wsPort,
                        resolution: 		this.settings.resolution, 
                        framerate: 		this.settings.framerate,
                        connectionType:       ( this.useMock ? "ws" : "ws" ),
                        cameraName:             this.cameraName,
                        cameraID:               this.cameraID
                    });
                }
            }),

            settings: new Listener( this.eventBus, "updateSettings", false, ( settings ) =>
            {
                log( "Received camera settings update" );

                this.settings = settings;

                // Restart camera
                this.restart()
                    .catch( (err) =>
                    {
                        error( `Error restarting camera: ${err.message}` );
                    });
            })
        }

        this.listeners.registration.enable();
        this.listeners.settings.enable();
    };

    getRaspistillCommand()
    {
        return [
            "nice", "--19",
            "raspistill", "--nopreview", "-w", "640", "-h", "480", "-q", "5",
            "-o", "/tmp/stream/pic.jpg", "-tl", "100", "-t", "9999999"
        ];
    }

    getDaemonCommand(runVideo)
    {
        // make certian that required directories are present
        exec('mkdir -p /home/stir/videos', (err, stdout, stderr) => {
          if(err) {
          }
        });
        exec('mkdir -p /home/stir/photos', (err, stdout, stderr) => {
          if(err) {
          }
        });
        // ensure correct ownership of files
        exec('chgrp -R stir /home/stir/videos', (err, stdout, stderr) => {
          if(err) {
          }
        });
        exec('chown -R stir /home/stir/videos', (err, stdout, stderr) => {
          if(err) {
          }
        });
        // get timestamp for date information
        var d = Date.now();
        if( this.useMock )
        {
            return [
               "nice", "--19",
               "mjpg_streamer",
               "-i", `input_raspicam.so ${this.settings.resolution} -br 70 -quality 10 ${this.settings.framerate} -cs ${this.cameraID}`,
               "-o", `output_ws.so -p ${this.wsPort}`
            ];
        }
        else
        {
            if ( this.cameraID < 2 )
            {
               if (runVideo === true) 
               {
                  return [
                     "nice", "--19",
                     "mjpg_streamer",
                     "-i", `input_raspicam.so ${this.settings.resolution} -br 70 -quality 10 ${this.settings.framerate} -cs ${this.cameraID}`,
                     "-o", `output_ws.so -p ${this.wsPort}`,
                     "-o", `output_file.so -f /home/stir/videos -m video.${this.cameraID}.${d}.mjpeg`,
                     "-o", `output_http.so -w /home/pi/www${this.cameraID} -p ${this.httpPort}`
                  ];
               }
               else
               {
                  return [
                     "nice", "--19",
                     "mjpg_streamer",
                     "-i", `input_raspicam.so ${this.settings.resolution} -br 70 -quality 10 ${this.settings.framerate} -cs ${this.cameraID}`,
                     "-o", `output_ws.so -p ${this.wsPort}`,
                     "-o", `output_http.so -w /home/pi/www${this.cameraID} -p ${this.httpPort}`
                  ];
               }
            } 
            else
            {
              // this should collect images from the remote RPi and feed then to the output websockets
              return [
                  "nice", "--19",
                  "echo",
                  "${this.cameraID}"
              ];
            }
        }
    }
// -r ${this.settings.settings.resolution}
// -d ${this.devicePath}`,
// -c ${this.sslInfo.certPath} -k ${this.sslInfo.keyPath}`

    start()
    {
        log( "Starting camera daemon: ", this.runVideo );
        this.daemon.command = this.getDaemonCommand(this.runVideo);
        log( `Daemon command: ${this.daemon.command}` );
        return this.daemon.startAsync();
    }

    stop()
    {
        log( "Stopping camera daemon" );
        return this.daemon.stopAsync();
    }

    restart()
    {
        log( "Restarting camera daemon" );
        return this.stop()
                .then( () =>
                {
                    // Update the daemon command, in case settings changed
                    this.daemon.command = this.getDaemonCommand(this.runVideo);
                    log( `Daemon command: ${this.daemon.command}` );
                })
                .then( () =>
                {
                    return this.start();
                });
    }

    kill()
    {
        log(`Killing camera ${this.cameraID}`);
        this.alive = false;
    }
};

module.exports = Camera;
