<link rel="import" href="components/polymer/polymer.html">
<link rel="import" href="components/iron-pages/iron-pages.html">

<link rel="import" href="components/new-ui/time.html">
<link rel="import" href="components/new-ui/time-slim.html">
<link rel="import" href="components/new-ui/compass.html">
<link rel="import" href="components/new-ui/depth.html">
<link rel="import" href="components/new-ui/throttle.html">
<link rel="import" href="components/new-ui/switches.html">
<link rel="import" href="components/new-ui/switches.html">
<link rel="import" href="components/new-ui/power.html">
<link rel="import" href="components/new-ui/power-slim.html">
<link rel="import" href="components/diagnostics/diagnostics.html">
<link rel="import" href="components/video/orov-video1.html">
<link rel="import" href="components/video/orov-video2.html">
<link rel="import" href="components/video/orov-video3.html">
<link rel="import" href="components/video/orov-video4.html">
<link rel="import" href="components/navigation-data/orov-horizon.html">
<link rel="import" href="components/navigation-data/attitude-indicator.html">
<link rel="import" href="components/connection-health/orov-ping-graph.html">
<link rel="import" href="components/internet-stream/orov-twitch-stream-status.html">
<link rel="import" href="components/settings-manager/orov-settings-manager.html">
<link rel="import" href="components/iron-media-query/iron-media-query.html">


<!--script type='text/javascript' src="js/no-scroll-fullscreen-viewport.js"></script-->
<style>
    #time-item[short-layout] {
        display: none;
    }
    
    fieldset {
        display: block;
        margin-left: 1.0em;
        margin-right: 1.0em;
        border: 2px solid white;
    }
    
    legend {
        display: table;
        min-width: 0px;
        max-width: 70%;
        position: relative;
        margin-bottom: 0em;
        padding: .35em .35em;
        font-size: 1.1vw;
        color: white;
        text-align: center;
        border-bottom: 0px;
    }

    .box {
        box-sizing: border-box;
        float: left;
        width: 50%;
        height: 50%;
    }

    /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
    .active, .accordion:hover {
        background-color: #ccc;
    }

    /* Style the accordion panel. Note: hidden by default */
    .panel {
        padding: 0 18px;
        height: 80%;
        background-color: black;
        display: none;
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: none;
        background-color: transparent;
        list-style-type: none;
    }

    /* Style the buttons that are used to open the tab content */
    .tab button {
        font-size: 12px;
        background-color: #f1f1f1;
        float: left;
        border: 1px solid #ccc;
        outline: none;
        cursor: pointer;
        padding: 4px 6px;
        transition: 0.4s;
    }

    /* Change background color of buttons on hover */
    .tab button:hover {
        background-color: #ddd;
    }

    /* Create an active/current tablink class */
    .tab button.active {
        background-color: #ccc;
    }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
        height: 100%;
        width: 90%;
    }

</style>
<!--iron-media-query query="(max-height: 600px)" query-matches="{{short}}"></iron-media-query-->
<script>

    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();

    function captureNotify() {
       if (!("Notification" in window)) {
          return;
       } else if (Notification.permission === "granted") {
          var notification = new Notification("Image Captured!");
       } else if (Notification.permission !== "denied") {
          Notification.requestPermission(function (permission) {
             if (permission === "granted") {
                var notification = new Notification("Image Captured!");
             }
          });
       }
    }
    // determine the active camera and get its port and ip address

    window.cockpit.on("plugin.externalLights.snapPhoto", function() 
    {
       // get the active camera
       // execute wget http://ip:<port>/?action=snapshot -O /home/pi/snaps/<camera#.date.jpg>
       captureNotify();
       window.cockpit.emit("plugin.externalLights.snapSelectedPhoto", activeCameraName() );
    });

    // register change of button on game controller
    window.cockpit.on("plugin.externalLights.topCamera", function() 
    {
       document.getElementById("top").click();
    });

    window.cockpit.on("plugin.externalLights.bottomCamera", function() 
    {
       document.getElementById("bottom").click();
    });

    window.cockpit.on("plugin.externalLights.sideCamera", function() 
    {
       document.getElementById("side").click();
    });

    window.cockpit.on("plugin.externalLights.frontCamera", function() 
    {
       document.getElementById("defaultOpen").click();
    });

    function activeCameraName() {
        // Declare all variables
        var i, active, tablinks;

        i = 0;
        active = 0;
        tablinks = document.getElementsByClassName("tablinks");
        while ((i < tablinks.length) && (active == 0)) {
            if (tablinks[i].className.indexOf("active") != -1) {
               active = 1;
               break;
            }
            i = i + 1;
        }
        // found it
        if (active === 1) {
            i = i + 1;
        }
        return( "Camera " + i.toString() );
    }

    function videoControl( inName ) {
        if (inName.localeCompare("Camera 1") === 0) {
            window.cockpit.emit("plugin.mjpegVideo.scanForCameras", false, true, false, false );
        }

        if (inName.localeCompare("Camera 2") === 0) {
            window.cockpit.emit("plugin.mjpegVideo.scanForCameras", true, false, false, false );
        }

        if (inName.localeCompare("Camera 3") === 0) {
            window.cockpit.emit("plugin.mjpegVideo.scanForCameras", false, false, false, true );
        }

        if (inName.localeCompare("Camera 4") === 0) {
            window.cockpit.emit("plugin.mjpegVideo.scanForCameras", false, false, true, false );
        }

    }

    function convertName( inName ) {
        if (inName.localeCompare("Front Camera") === 0) {
           return("Camera 1");
        }
        if (inName.localeCompare("Side Camera") === 0) {
           return("Camera 2");
        }
        if (inName.localeCompare("Top Camera") === 0) {
           return("Camera 3");
        }
        if (inName.localeCompare("Bottom Camera") === 0) {
           return("Camera 4");
        }
        return("");
    }

    function openCamera(evt, cameraName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(cameraName).style.display = "inline-block";
        evt.currentTarget.className += " active";
        
        var baseName = convertName(cameraName);
        window.cockpit.emit("activeCameraTab", baseName );
        window.cockpit.emit("plugin.externalLights.setSelectedLight", baseName );
        videoControl(baseName);
    }

</script>

<div id="UI" class="full-height">
    <div id="newuiBody" class="full-height">
        <div id="newuiContainer">
        </div>
        <div id="mainContent" class="full-height">
            <div class="tab">
            <button class="tablinks" onclick="openCamera(event, 'Front Camera')" id="defaultOpen">Front Camera</button>
            <button class="tablinks" onclick="openCamera(event, 'Side Camera')" id="side">Side Camera</button>
            <button class="tablinks" onclick="openCamera(event, 'Top Camera')" id="top">Top Camera</button>
            <button class="tablinks" onclick="openCamera(event, 'Bottom Camera')" id="bottom">Bottom Camera</button>
            </div>
            <div id="Front Camera" class=tabcontent>
                <div id="newuiVideo" class="full-height">
                    <orov-video1 id="camera01" border='1' style='width:100%; height:100%; position:relative' location='forward' event-emitter="{{cockpitEventEmitter}}">
                    </orov-video1>
                </div>
            </div>
            <div id="Side Camera" class=tabcontent>
                <div id="newuiVideo" class="full-height">
                    <orov-video2 id="camera02" border='1' style='width: 100%; height:100%; position:relative' location='forward' event-emitter="{{cockpitEventEmitter}}">
                    </orov-video2>
                </div>
            </div>
            <div id="Top Camera" class=tabcontent>
                <div id="newuiVideo" class="full-height">
                    <orov-video3 id="camera03" border='1' style='width: 100%; height:100%; position:relative' location='forward' event-emitter="{{cockpitEventEmitter}}">
                    </orov-video3>
                </div>
            </div>
            <div id="Bottom Camera" class=tabcontent>
                <div id="newuiVideo" class="full-height">
                    <orov-video4 id="camera04" border='1' style='width: 100%; height:100%; position:relative' location='forward' event-emitter="{{cockpitEventEmitter}}">
                    </orov-video4>
                </div>
            </div>
            <div id="newuiControlpad">
                <fieldset id="power-item">
                    <legend>{{__('Battery')}}</legend>
                    <orov-newui-power id="power" event-emitter="{{cockpitEventEmitter}}"></orov-newui-power>
                </fieldset>
                <fieldset style="padding-bottom: 2em">
                    <legend>{{__('Depth')}}</legend>
                    <orov-newui-depth id="newui-depth" style="margin-top: 2.0em;" class="center control" event-emitter="{{cockpitEventEmitter}}"></orov-newui-depth>
                </fieldset>
                <fieldset style="padding-bottom: 1.2em">
                    <legend>{{__('Throttle')}}</legend>
                    <orov-newui-throttle id="newui-throttle" class="center control" event-emitter="{{cockpitEventEmitter}}"></orov-newui-throttle>
                </fieldset>
                <fieldset>
                    <legend>{{__('Switches')}}</legend>
                    <orov-newui-switches class="center" event-emitter="{{cockpitEventEmitter}}"></orov-newui-switches>
                </fieldset>
                <fieldset id="time-item">
                    <legend>{{__('Time')}}</legend>
                    <orov-newui-time event-emitter="{{cockpitEventEmitter}}"></orov-newui-time>
                </fieldset>

            </div>
        </div>

    </div>

</div>
<!--Placeholder for the UI plugin-->
